part of 'yaml_document.dart';

/// A event that controls the [DocumentParser]'s next parse action
abstract interface class ParserEvent {
  /// Returns `true` if the [DocumentParser] is parsing a [Node] with
  /// [NodeStyle.flow] styling.
  bool get isFlowContext;
}

/// An event that triggers parsing of a [Scalar]
enum ScalarEvent implements ParserEvent {
  startBlockLiteral(isFlowContext: false),

  startBlockFolded(isFlowContext: false),

  startFlowPlain(isFlowContext: true),

  startFlowDoubleQuoted(isFlowContext: true),

  startFlowSingleQuoted(isFlowContext: true);

  const ScalarEvent({required this.isFlowContext});

  @override
  final bool isFlowContext;
}

/// An event that trigger the parsing of a [Node]'s properties
enum NodePropertyEvent implements ParserEvent {
  startTag,

  startAnchor,

  startAlias;

  // Intentional. TODO: Implement in parser
  @override
  bool get isFlowContext => throw UnimplementedError();
}

/// An event that triggers parsing of a [Node] with [NodeStyle.block] styling.
enum BlockCollectionEvent implements ParserEvent {
  startBlockList,

  startBlockListEntry,

  startBlockMap,

  startImplicitKey,

  startExplicitKey,

  startEntryValue;

  @override
  bool get isFlowContext => false;
}

/// An event that triggers parsing of a [Node] with [NodeStyle.flow] styling
enum FlowCollectionEvent implements ParserEvent {
  startFlowMap,

  startImplicitKey,

  startExplicitKey,

  startEntryValue,

  endFlowMap,

  startFlowSequence,

  endFlowSequence,

  nextFlowEntry;

  @override
  bool get isFlowContext => true;
}

/// Represents a [ParserEvent] generated by the transition from a
/// [BlockCollectionEvent] to a [FlowCollectionEvent]
final class BlockToFlowEvent implements ParserEvent {
  BlockToFlowEvent(
    this.event, {
    required this.indentLevel,
    required this.indent,
    required this.isInline,
  });

  final ParserEvent event;

  final int indentLevel;

  final int indent;

  final bool isInline;

  @override
  bool get isFlowContext => event.isFlowContext;
}

/// A [ParserEvent] that requires the [DocumentParser] to look for more [Node]'s
/// to parse
final class NodeEvent<T extends ParserEvent> implements ParserEvent {
  NodeEvent(this.event, this.delegate);

  final T event;

  final ParserDelegate delegate;

  @override
  bool get isFlowContext => event.isFlowContext;
}
